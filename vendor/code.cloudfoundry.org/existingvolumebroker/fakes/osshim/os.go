// Code generated by counterfeiter. DO NOT EDIT.
package osshim

import (
	"io/fs"
	"os"
	"time"
)

//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 -generate
//counterfeiter:generate . Os

// Os is a generated interface representing the exported functions
// in the os package.
type Os interface {
	Chdir(arg1 string) error
	Chmod(arg1 string, arg2 fs.FileMode) error
	Chown(arg1 string, arg2 int, arg3 int) error
	Chtimes(arg1 string, arg2 time.Time, arg3 time.Time) error
	Clearenv()
	Create(arg1 string) (*os.File, error)
	CreateTemp(arg1 string, arg2 string) (*os.File, error)
	DirFS(arg1 string) fs.FS
	Environ() []string
	Executable() (string, error)
	Exit(arg1 int)
	Expand(arg1 string, arg2 func(string) string) string
	ExpandEnv(arg1 string) string
	FindProcess(arg1 int) (*os.Process, error)
	Getegid() int
	Getenv(arg1 string) string
	Geteuid() int
	Getgid() int
	Getgroups() ([]int, error)
	Getpagesize() int
	Getpid() int
	Getppid() int
	Getuid() int
	Getwd() (string, error)
	Hostname() (string, error)
	IsExist(arg1 error) bool
	IsNotExist(arg1 error) bool
	IsPathSeparator(arg1 uint8) bool
	IsPermission(arg1 error) bool
	IsTimeout(arg1 error) bool
	Lchown(arg1 string, arg2 int, arg3 int) error
	Link(arg1 string, arg2 string) error
	LookupEnv(arg1 string) (string, bool)
	Lstat(arg1 string) (fs.FileInfo, error)
	Mkdir(arg1 string, arg2 fs.FileMode) error
	MkdirAll(arg1 string, arg2 fs.FileMode) error
	MkdirTemp(arg1 string, arg2 string) (string, error)
	NewFile(arg1 uintptr, arg2 string) *os.File
	NewSyscallError(arg1 string, arg2 error) error
	Open(arg1 string) (*os.File, error)
	OpenFile(arg1 string, arg2 int, arg3 fs.FileMode) (*os.File, error)
	Pipe() (*os.File, *os.File, error)
	ReadDir(arg1 string) ([]fs.DirEntry, error)
	ReadFile(arg1 string) ([]byte, error)
	Readlink(arg1 string) (string, error)
	Remove(arg1 string) error
	RemoveAll(arg1 string) error
	Rename(arg1 string, arg2 string) error
	SameFile(arg1 fs.FileInfo, arg2 fs.FileInfo) bool
	Setenv(arg1 string, arg2 string) error
	StartProcess(arg1 string, arg2 []string, arg3 *os.ProcAttr) (*os.Process, error)
	Stat(arg1 string) (fs.FileInfo, error)
	Symlink(arg1 string, arg2 string) error
	TempDir() string
	Truncate(arg1 string, arg2 int64) error
	Unsetenv(arg1 string) error
	UserCacheDir() (string, error)
	UserConfigDir() (string, error)
	UserHomeDir() (string, error)
	WriteFile(arg1 string, arg2 []byte, arg3 fs.FileMode) error
}

type OsShim struct{}

func (p *OsShim) Chdir(arg1 string) error {
	return os.Chdir(arg1)
}

func (p *OsShim) Chmod(arg1 string, arg2 fs.FileMode) error {
	return os.Chmod(arg1, arg2)
}

func (p *OsShim) Chown(arg1 string, arg2 int, arg3 int) error {
	return os.Chown(arg1, arg2, arg3)
}

func (p *OsShim) Chtimes(arg1 string, arg2 time.Time, arg3 time.Time) error {
	return os.Chtimes(arg1, arg2, arg3)
}

func (p *OsShim) Clearenv() {
	os.Clearenv()
}

func (p *OsShim) Create(arg1 string) (*os.File, error) {
	return os.Create(arg1)
}

func (p *OsShim) CreateTemp(arg1 string, arg2 string) (*os.File, error) {
	return os.CreateTemp(arg1, arg2)
}

func (p *OsShim) DirFS(arg1 string) fs.FS {
	return os.DirFS(arg1)
}

func (p *OsShim) Environ() []string {
	return os.Environ()
}

func (p *OsShim) Executable() (string, error) {
	return os.Executable()
}

func (p *OsShim) Exit(arg1 int) {
	os.Exit(arg1)
}

func (p *OsShim) Expand(arg1 string, arg2 func(string) string) string {
	return os.Expand(arg1, arg2)
}

func (p *OsShim) ExpandEnv(arg1 string) string {
	return os.ExpandEnv(arg1)
}

func (p *OsShim) FindProcess(arg1 int) (*os.Process, error) {
	return os.FindProcess(arg1)
}

func (p *OsShim) Getegid() int {
	return os.Getegid()
}

func (p *OsShim) Getenv(arg1 string) string {
	return os.Getenv(arg1)
}

func (p *OsShim) Geteuid() int {
	return os.Geteuid()
}

func (p *OsShim) Getgid() int {
	return os.Getgid()
}

func (p *OsShim) Getgroups() ([]int, error) {
	return os.Getgroups()
}

func (p *OsShim) Getpagesize() int {
	return os.Getpagesize()
}

func (p *OsShim) Getpid() int {
	return os.Getpid()
}

func (p *OsShim) Getppid() int {
	return os.Getppid()
}

func (p *OsShim) Getuid() int {
	return os.Getuid()
}

func (p *OsShim) Getwd() (string, error) {
	return os.Getwd()
}

func (p *OsShim) Hostname() (string, error) {
	return os.Hostname()
}

func (p *OsShim) IsExist(arg1 error) bool {
	return os.IsExist(arg1)
}

func (p *OsShim) IsNotExist(arg1 error) bool {
	return os.IsNotExist(arg1)
}

func (p *OsShim) IsPathSeparator(arg1 uint8) bool {
	return os.IsPathSeparator(arg1)
}

func (p *OsShim) IsPermission(arg1 error) bool {
	return os.IsPermission(arg1)
}

func (p *OsShim) IsTimeout(arg1 error) bool {
	return os.IsTimeout(arg1)
}

func (p *OsShim) Lchown(arg1 string, arg2 int, arg3 int) error {
	return os.Lchown(arg1, arg2, arg3)
}

func (p *OsShim) Link(arg1 string, arg2 string) error {
	return os.Link(arg1, arg2)
}

func (p *OsShim) LookupEnv(arg1 string) (string, bool) {
	return os.LookupEnv(arg1)
}

func (p *OsShim) Lstat(arg1 string) (fs.FileInfo, error) {
	return os.Lstat(arg1)
}

func (p *OsShim) Mkdir(arg1 string, arg2 fs.FileMode) error {
	return os.Mkdir(arg1, arg2)
}

func (p *OsShim) MkdirAll(arg1 string, arg2 fs.FileMode) error {
	return os.MkdirAll(arg1, arg2)
}

func (p *OsShim) MkdirTemp(arg1 string, arg2 string) (string, error) {
	return os.MkdirTemp(arg1, arg2)
}

func (p *OsShim) NewFile(arg1 uintptr, arg2 string) *os.File {
	return os.NewFile(arg1, arg2)
}

func (p *OsShim) NewSyscallError(arg1 string, arg2 error) error {
	return os.NewSyscallError(arg1, arg2)
}

func (p *OsShim) Open(arg1 string) (*os.File, error) {
	return os.Open(arg1)
}

func (p *OsShim) OpenFile(arg1 string, arg2 int, arg3 fs.FileMode) (*os.File, error) {
	return os.OpenFile(arg1, arg2, arg3)
}

func (p *OsShim) Pipe() (*os.File, *os.File, error) {
	return os.Pipe()
}

func (p *OsShim) ReadDir(arg1 string) ([]fs.DirEntry, error) {
	return os.ReadDir(arg1)
}

func (p *OsShim) ReadFile(arg1 string) ([]byte, error) {
	return os.ReadFile(arg1)
}

func (p *OsShim) Readlink(arg1 string) (string, error) {
	return os.Readlink(arg1)
}

func (p *OsShim) Remove(arg1 string) error {
	return os.Remove(arg1)
}

func (p *OsShim) RemoveAll(arg1 string) error {
	return os.RemoveAll(arg1)
}

func (p *OsShim) Rename(arg1 string, arg2 string) error {
	return os.Rename(arg1, arg2)
}

func (p *OsShim) SameFile(arg1 fs.FileInfo, arg2 fs.FileInfo) bool {
	return os.SameFile(arg1, arg2)
}

func (p *OsShim) Setenv(arg1 string, arg2 string) error {
	return os.Setenv(arg1, arg2)
}

func (p *OsShim) StartProcess(arg1 string, arg2 []string, arg3 *os.ProcAttr) (*os.Process, error) {
	return os.StartProcess(arg1, arg2, arg3)
}

func (p *OsShim) Stat(arg1 string) (fs.FileInfo, error) {
	return os.Stat(arg1)
}

func (p *OsShim) Symlink(arg1 string, arg2 string) error {
	return os.Symlink(arg1, arg2)
}

func (p *OsShim) TempDir() string {
	return os.TempDir()
}

func (p *OsShim) Truncate(arg1 string, arg2 int64) error {
	return os.Truncate(arg1, arg2)
}

func (p *OsShim) Unsetenv(arg1 string) error {
	return os.Unsetenv(arg1)
}

func (p *OsShim) UserCacheDir() (string, error) {
	return os.UserCacheDir()
}

func (p *OsShim) UserConfigDir() (string, error) {
	return os.UserConfigDir()
}

func (p *OsShim) UserHomeDir() (string, error) {
	return os.UserHomeDir()
}

func (p *OsShim) WriteFile(arg1 string, arg2 []byte, arg3 fs.FileMode) error {
	return os.WriteFile(arg1, arg2, arg3)
}

var _ Os = new(OsShim)
